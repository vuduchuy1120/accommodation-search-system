@using ASSystem.Dtos

@model MotelwithImagesDto

<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<link href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700,800&display=swap" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css">
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.theme.default.min.css">
<style>

    .LeftContent {
        width: 60%;
        height: 40%;
    }

    .MiddleContent {
        width: 5%;
        height: 80%;
    }

    .RightContent {
        width: 35%;
        height: 80%;
    }

</style>
<div class="container-fluid" style="margin-bottom:100px">
    <h1 class="text-center">Update Motel</h1>
    <hr />
    <form method="post">
        <input type="text" class="form-control" name="accountId" id="accountId" hidden>
        <div class="d-flex">
            <div class="LeftContent">
                <div id="carouselExampleInterval" class="carousel slide">
                    <div class="carousel-inner">
                        <div class="carousel-item active">
                            <div class="d-flex justify-content-center flex-column">
                                <img src="https://localhost:7280/api/Motel@(Model.RoomImages[0].PathImageDetail)" style="height: 500px !important; width: 450px" class="d-block w-100 h-100" />
                                <button type="button" class="btn btn-primary mx-auto" style="width: 100px; margin-top: 10px;" onclick="getId(@(Model.RoomImages[0].RoomImageId))">
                                    Delete
                                </button>
                            </div>
                        </div>
                        @if (Model.RoomImages.Count > 1)
                        {
                            @for (int i = 1; i < Model.RoomImages.Count; i++)
                            {
                                <div class="carousel-item">
                                    <div class="d-flex justify-content-center flex-column">
                                        <img src="https://localhost:7280/api/Motel@(Model.RoomImages[i].PathImageDetail)" style="height: 500px !important; width: 450px" class="d-block w-100 h-100" />
                                        <button type="button" class="btn btn-primary mx-auto" style="width: 100px; margin-top: 10px;" onclick="getId(@(Model.RoomImages[i].RoomImageId))">Delete</button>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleInterval" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleInterval" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>
            <div class="MiddleContent"></div>
            <div class="RightContent">
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="title" class="form-label">Title</label>
                            <input style="border: 1px solid #dee2e6;" type="text" class="form-control" name="title" id="title" placeholder="Title" value="@Model.Tittle">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="description" class="form-label">Description</label>
                            <textarea style="border: 1px solid #dee2e6;" class="form-control"
                                      name="description" id="description" placeholder="Description">@Model.Description</textarea>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="description" class="form-label">Description Details</label>
                            <textarea style="border: 1px solid #dee2e6;" class="form-control"
                                      name="descriptionDetails" id="descriptionDetails" placeholder="Description">@Model.DescriptionDetails</textarea>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="address" class="form-label">Area (m²)</label>
                            <input style="border: 1px solid #dee2e6;" type="text"
                                   value="@Model.Area"
                                   class="form-control" name="area" id="area" placeholder="Example: 25">
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="address" class="form-label">Address</label>
                            <input style="border: 1px solid #dee2e6;" type="text"
                                   value="@Model.Address"
                                   class="form-control" name="address" id="address" placeholder="Address">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="price" class="form-label">Price</label>
                            <input style="border: 1px solid #dee2e6;" type="text"
                                   value="@Model.Price.Value.ToString("#0.0")"
                                   class="form-control" name="price" id="price" placeholder="Price">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="quantityEmptyRooms" class="form-label">QuantityEmptyRooms</label>
                            <input style="border: 1px solid #dee2e6;"
                                   value="@Model.QuantityEmptyRooms"
                                   type="text" class="form-control" name="quantityEmptyRooms" id="quantityEmptyRooms" placeholder="QuantityEmptyRooms">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="contact" class="form-label">Contact</label>
                            <input style="border: 1px solid #dee2e6;"
                                   value="@Model.Contact"
                                   type="text" class="form-control" name="contact" id="contact" placeholder="Contact">
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="province" class="form-label">province</label>
                            <input type="hidden" value="@Model.Province" id="initProvince" />
                            <select class="form-control" id="province"
                                    name="province">
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="district" class="form-label">district</label>
                            <input type="hidden" value="@Model.District" id="initDistrict" />

                            <select class="form-control" id="district"
                                    value="@Model.District"
                                    name="district">
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="ward" class="form-label">ward</label>
                            <input type="hidden" value="@Model.Ward" id="initWard" />

                            <select class="form-control" id="ward"
                                    value="@Model.Ward"
                                    name="ward">
                            </select>
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col">
                        <div class="mb-1">
                            <label for="images" class="form-label uploadsImages">Uploads Images</label>
                            <input style="border: 1px solid #dee2e6;" type="file" class="form-control" name="images" id="images" multiple>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <button class="btn btn-secondary" type="submit" onclick="Update()">Submit</button>
                    </div>
                </div>

            </div>
        </div>
    </form>
</div>


<script>
    const getId = (id) => {
        fetch('https://localhost:7280/api/RoomImage/' + @Model.MotelId + "/" + id, {
            method: 'DELETE'
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
                location.reload();
                // You might want to handle success here, maybe redirect to a success page or show a success message
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                // You might want to display an error message to the user
            });
    }

    fetch('https://api.allorigins.win/get?url=' + encodeURIComponent('https://vnprovinces.pythonanywhere.com/api/provinces/?limit=100', {
        mode: 'no-cors'
    }))
        .then(response => response.json())
        .then(data => {

            const provinces = JSON.parse(data.contents).results; // Extract provinces from the response

            // Populate province select element
            var provinceSelect = document.getElementById("province");
            provinces.forEach(province => {
                var option = document.createElement("option");
                option.text = province.name;
                option.value = province.id;
                provinceSelect.appendChild(option);
            });

            // Add event listener to province select element
            provinceSelect.addEventListener('change', function () {
                var selectedProvinceId = this.value;

                // Fetch districts based on the selected province
                fetch('https://api.allorigins.win/get?url=' + encodeURIComponent('https://vnprovinces.pythonanywhere.com/api/provinces/' + selectedProvinceId, {
                    mode: 'no-cors'
                }))
                    .then(response => response.json())
                    .then(data => {
                        console.log("fetch district");
                        console.log(data);
                        const districts = JSON.parse(data.contents).districts; // Extract districts from the response
                        console.log(districts);
                        // Populate district select element
                        var districtSelect = document.getElementById("district");
                        districtSelect.innerHTML = ""; // Clear existing options
                        districts.forEach(district => {
                            var option = document.createElement("option");
                            option.text = district.name;
                            option.value = district.id;
                            districtSelect.appendChild(option);
                        });
                        districtSelect.addEventListener('change', function () {
                            var selectedDistrictId = this.value;
                            console.log(selectedDistrictId);
                            // Fetch wards based on the selected province and district
                            fetch(`https://vnprovinces.pythonanywhere.com/api/wards/?province_id=${selectedProvinceId}&district_id=${selectedDistrictId}&limit=100`, {
                                mode: 'cors' // Ensure CORS mode is set to 'cors'
                            })
                                .then(response => response.json())
                                .then(data => {
                                    console.log("fetch ward");
                                    console.log(data);
                                    const wards = data.results; // Extract wards from the response

                                    // Populate ward select element
                                    var wardSelect = document.getElementById("ward");
                                    wardSelect.innerHTML = ""; // Clear existing options
                                    wards.forEach(ward => {
                                        var option = document.createElement("option");
                                        option.text = ward.name;
                                        option.value = ward.id;
                                        wardSelect.appendChild(option);
                                    });
                                })
                                .catch(error => console.error(error));
                        });
                    })
                    .catch(error => console.error(error));
            });
        })
        .catch(error => console.error(error));
    const Update = () => {
        event.preventDefault(); // Prevent the default form submission behavior

        var title = document.getElementById("title").value;
        var description = document.getElementById("description").value;
        var address = document.getElementById("address").value;
        var price = document.getElementById("price").value;
        var quantityEmptyRooms = document.getElementById("quantityEmptyRooms").value;
        var contact = document.getElementById("contact").value;
        var province = document.getElementById("province").value;
        var district = document.getElementById("district").value;
        var ward = document.getElementById("ward").value;
        var area = document.getElementById("area").value;
        var descriptionDetails = document.getElementById("descriptionDetails").value;
        var images = document.getElementById("images").files;
        // var accountId = document.getElementById("accountId").value;
        var accountId = 4;
        var formData = new FormData();
        formData.append("motelJson", JSON.stringify({
            tittle: title,
            description: description,
            address: address,
            area: area,
            descriptionDetails: descriptionDetails,
            price: price,
            quantityEmptyRooms: quantityEmptyRooms,
            contact: contact,
            province: province,
            district: district,
            ward: ward,
            accountId: accountId
        }));
        for (var i = 0; i < images.length; i++) {
            formData.append("images", images[i]);
        }
        fetch('https://localhost:7280/api/Motel/' + @Model.MotelId, {
            method: 'PUT',
            body: formData
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
                location.href = "https://localhost:7101/Motel";
                // You might want to handle success here, maybe redirect to a success page or show a success message
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                // You might want to display an error message to the user
            });
    }


    var province = document.getElementById("initProvince").value;
    var district = document.getElementById("initDistrict").value;
    var ward = document.getElementById("initWard").value;

    const fetchProvinces = () => {
        fetch('https://api.allorigins.win/get?url=' + encodeURIComponent('https://vnprovinces.pythonanywhere.com/api/provinces/?limit=100', {
            mode: 'cors'
        }))
            .then(response => response.json())
            .then(data => {

                const provinces = JSON.parse(data.contents).results; // Extract provinces from the response

                // Populate province select element
                var provinceSelect = document.getElementById("province");
                provinces.forEach(province => {
                    var option = document.createElement("option");
                    option.text = province.name;
                    option.value = province.id;
                    provinceSelect.appendChild(option);
                });
                provinceSelect.value = province;
            });
    }
    const fetchDistricts = (province) => {
        fetch('https://api.allorigins.win/get?url=' + encodeURIComponent('https://vnprovinces.pythonanywhere.com/api/provinces/' + province, {
            mode: 'cors'
        }))
            .then(response => response.json())
            .then(data => {
                const districts = JSON.parse(data.contents).districts;
                var districtSelect = document.getElementById("district");
                districtSelect.innerHTML = "";
                districts.forEach(district => {
                    var option = document.createElement("option");
                    option.text = district.name;
                    option.value = district.id;
                    districtSelect.appendChild(option);
                });
            })
            .catch(error => console.error(error));
    }

    const fetchWards = (province, district) => {
        fetch(`https://vnprovinces.pythonanywhere.com/api/wards/?province_id=${province}&district_id=${district}&limit=100`, {
            mode: 'cors'
        })
            .then(response => response.json())
            .then(data => {
                const wards = data.results;
                var wardSelect = document.getElementById("ward");
                wardSelect.innerHTML = "";
                wards.forEach(ward => {
                    var option = document.createElement("option");
                    option.text = ward.name;
                    option.value = ward.id;
                    wardSelect.appendChild(option);
                });
            })
            .catch(error => console.error(error));
    }
    fetchProvinces();
    fetchDistricts(province);
    fetchWards(province, district);

</script>
